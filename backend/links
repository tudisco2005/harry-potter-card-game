------------------------------------------------------------------------------------------
# docker install mongo
https://medium.com/norsys-octogone/a-local-environment-for-mongodb-with-docker-compose-ba52445b93ed
------------------------------------------------------------------------------------------
# auto create wizard db
La configurazione è quasi corretta, ma ci sono alcune considerazioni importanti da fare:

## Problemi nella configurazione attuale:

1. **Creazione automatica del database**: MongoDB creerà automaticamente il database specificato in `MONGO_INITDB_DATABASE` solo se vengono anche forniti degli script di inizializzazione o se viene creato un utente per quel database specifico.

2. **Manca la creazione di utenti per il database**: Attualmente stai creando solo l'utente root, ma non un utente specifico per il database dell'applicazione.

## Configurazione migliorata:

```yaml
services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    hostname: mongodb
    volumes:
      - mongodb-data:/data/db/
      - mongodb-log:/var/log/mongodb/
      - ./mongo-init:/docker-entrypoint-initdb.d/  # Script di inizializzazione
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - "27017:27017"
    networks:
      - mongodb_network

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_SERVER: 'mongodb'
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
    ports:
      - "8081:8081"
    networks:
      - mongodb_network
    depends_on:
      - mongodb

volumes:
  mongodb-data:
    driver: local
    name: mongo-data
  mongodb-log:
    driver: local
    name: mongo-log

networks:
  mongodb_network:
    driver: bridge
    name: mongo-network
```

## Script di inizializzazione:

Crea una cartella `mongo-init` e al suo interno un file `init.js`:

```javascript
// mongo-init/init.js
db = db.getSiblingDB(process.env.MONGO_INITDB_DATABASE);

// Crea un utente per il database dell'applicazione
db.createUser({
  user: process.env.MONGO_APP_USERNAME,
  pwd: process.env.MONGO_APP_PASSWORD,
  roles: [
    {
      role: 'readWrite',
      db: process.env.MONGO_INITDB_DATABASE
    }
  ]
});

// Crea una collezione di esempio (opzionale)
db.createCollection('users');

print('Database inizializzato con successo');
```

## File .env aggiornato:

```env
MONGO_INITDB_ROOT_USERNAME=admin
MONGO_INITDB_ROOT_PASSWORD=strongpassword
MONGO_INITDB_DATABASE=myapp
MONGO_APP_USERNAME=appuser
MONGO_APP_PASSWORD=apppassword
MONGO_EXPRESS_USERNAME=admin
MONGO_EXPRESS_PASSWORD=password
```

## Vantaggi di questa configurazione:

1. Il database viene creato automaticamente all'avvio del container
2. Viene creato un utente specifico per l'applicazione (più sicuro dell'utente root)
3. Gli script di inizializzazione vengono eseguiti solo al primo avvio
4. La struttura è più organizzata e sicura

Con questa configurazione, quando avvii il container per la prima volta, MongoDB eseguirà automaticamente lo script di inizializzazione e creerà il database con l'utente appropriato.
------------------------------------------------------------------------------------------
